using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using static Home_Work.Application.App.Utils;       // для использования утилит

/*
 * Задача 1. Доработайте класс, описывающий электроприбор (название, мощность,
 * цена, включен/выключен) из задания на 06.10.2021. Массив приборов выводить 
 * в табличном формате, в массиве должно быть от 12 до 20 прибров.
 * 
 * По командам, назначенным на клавиши, изменять мощность (на случайную 
 * величину), состояние прибора (включен, выключен). Прибор для изменения 
 * выбирается случайным образом из массива приборов.
 * 
 * Если новое значение мощности – нечетное число, то зажигать событие 
 * PowerChange. При присваивании свойству, отражающему состояние электроприбора
 * значения, отличного от текущего, зажигать событие StateChange.
 * 
 * Создать Наблюдатель1, который будет выводить старую и новую мощность прибора 
 * в консоль в строке таблицы для соответствующего прибора
 * Создать Наблюдатель2, который выводит состояние соответствующего прибора в 
 * консоли (в строке, соответствующего прибора в таблице): красный фон для 
 * выключенного прибора, зеленый фон для включенного прибора.
 * 
 * 
 * 
 * Задача 2. Для описания персоны используются фамилия и инициалы, возраст в 
 * годах, название города проживания. Разработайте класс и следующие события 
 * для этого класса: 
 * •	при присваивании возраста меньше 21 – зажигать событие Childhood
 * •	при изменении города проживания зажигать событие Relocate
 * 
 * Для проверки работы подпишите на события как минимум трех наблюдателей (метод 
 * класса, статический метод класса, лямбда-выражение). 
 * 
 * Сгенерируйте массив (не менее чем 10 персон). Выводите массив в табличной 
 * форме. По командам, назначенным на клавиши задавать некоторому случайно 
 * выбранному элементу массива возраст (присваиванием свойству некоторого 
 * случайного числа), город проживания (выбирать при помощи случайного индекса 
 * название города из массива названий городов).
 * 
 * Для события Childhood обработчики события должны выполнять следующее:
 * 1.	В первом обработчике выводить возраст, фамилию и инициалы, сообщение 
 *      "возраст меньше допустимого" некоторым цветом в консоль, в строке 
 *      отображения персоны в таблице
 * 2.	Во втором обработчике выводить строку "обнаружен несовершеннолетний" в 
 *      заголовок окна. 
 * 3.	В третьем обработчике подсчитывать общее количество персон с возрастом
 *      < 21 года, выводить это количество некоторым цветом в консоль, в строку 
 *      заголовка таблицы
 * Для события Relocate обработчики должны выполнять следующее:
 * 1.	Подсчет количества персон в городах, выводить результат в некоторую 
 *      область консоли в виде таблицы со столбцами «Город» и «Количество 
 *      проживающих»
 * 2.	Вывод строки формата «старый город -> новый город» возле соответствующей 
 *      строки таблицы, отображающей массив персон

*/

namespace Home_Work.Application
{
    // константы для меню
    internal enum Cmd
    {
        pointExit,
        pointOne,
        pointTwo,
        pointThree,
        pointFour,
        pointFive,
        pointSix
    }

    public partial class App
    {

        #region Меню заданий 

        // номер задания 
        int numberTask = 0;

        // меню заданий
        public void Menu()
        {
            // вывод меню
            while (true)
            {
                // отчистка консоли
                Console.Clear();

                // цвет 
                Console.ForegroundColor = ConsoleColor.Cyan;

                int x = 5, y = Console.CursorTop + 3;

                // заголовок
                Console.SetCursorPosition(x + 3, y); WriteColor($"{"    Главное меню"}", ConsoleColor.Blue);

                y += 2;

                // пукты меню
                Console.SetCursorPosition(x, y++); Console.WriteLine("Задание 1. Электроприбор");
                Console.SetCursorPosition(x, y++); Console.WriteLine("Задание 2. Персона");
                Console.SetCursorPosition(x, ++y); Console.WriteLine("0. Выход");

                y += 4;

                // ввод номера задания
                Console.SetCursorPosition(x, y); Console.Write("Введите номер задания: ");
                if (!int.TryParse(Console.ReadLine(), out int n))
                    continue;

                // обработка ввода 
                switch (n)
                {
                    // выход
                    case (int)Cmd.pointExit:
                        // позициониаровние курсора 
                        Console.SetCursorPosition(2, y + 5);
                        return;

                    // Задание 1. Название задания
                    case (int)Cmd.pointOne:
                        // запуск задания 
                        Task1();
                        break;

                    // Задание 2. Название задания
                    case (int)Cmd.pointTwo:
                        // запуск задания 
                        Task2();
                        break;

                    // если номер задания невалиден
                    default:

                        // установка цвета
                        Console.BackgroundColor = ConsoleColor.DarkRed;
                        Console.ForegroundColor = ConsoleColor.Black;

                        // позиционирование курсора
                        Console.SetCursorPosition(x, y); Console.WriteLine("         Номер задания невалиден!         ");

                        // выключение курсора
                        Console.CursorVisible = false;

                        // задержка времени
                        Thread.Sleep(1000);

                        // возвращение цвета
                        Console.ResetColor();

                        // включение курсора
                        Console.CursorVisible = true;

                        break;
                } // switch
            }
        } // Menu

        #endregion

    }
}
